#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient

import math
import tf_transformations
from geometry_msgs.msg import PoseStamped, Point
from moveit_msgs.action import MoveGroup
from moveit_msgs.msg import MotionPlanRequest, Constraints, PositionConstraint, OrientationConstraint
from shape_msgs.msg import SolidPrimitive
from visualization_msgs.msg import Marker

class MoveAlongHemisphere(Node):
    def __init__(self):
        super().__init__('move_along_hemisphere_client')
        self._action_client = ActionClient(self, MoveGroup, 'move_action')

        self.marker_pub = self.create_publisher(Marker, '/visualization_marker', 10)

        self.trajectory_points = self.generate_hemisphere_points()
        self.current_index = 0

        self.get_logger().info('Waiting for MoveGroup action server...')
        self._action_client.wait_for_server()

        self.publish_center_marker()
        self.publish_arc_line_marker()

        self.send_next_goal()

    def generate_hemisphere_points(self):
        points = []
        center = [0.0, -0.30, 0.05]  # ÁÇπA: y=-0.30, ÁÇπB: z+=0.05 ‚Üí (0, -0.30, 0.05)
        sphere_radius = 0.05  # ÂçäÂæÑ5cm
        offset = 0.01         # Ë°®Èù¢„Åã„Çâ1cm‰∏äÔºàÂ§ñÂÅ¥Ôºâ
        R = sphere_radius + offset

        n_div = 18
        for i in range(n_div + 1):
            theta = math.pi * i / n_div  # 0 ~ œÄ
            phi = math.pi / 2  # Âõ∫ÂÆö: xËª∏ÊñπÂêëÊñ≠Èù¢ÔºàxzÂπ≥Èù¢Ôºâ

            x = center[0] + R * math.cos(theta)
            y = center[1]
            z = center[2] + R * math.sin(theta)

            # Ê≥ïÁ∑ö„Éô„ÇØ„Éà„É´Ôºà‰∏≠ÂøÉ‚ÜíÁÇπÔºâ
            dir_x = x - center[0]
            dir_y = y - center[1]
            dir_z = z - center[2]
            norm = math.sqrt(dir_x**2 + dir_y**2 + dir_z**2)
            dir_x /= norm
            dir_y /= norm
            dir_z /= norm

            # EE„ÅÆZËª∏„ÇíÊ≥ïÁ∑öÊñπÂêë„Å´„Åô„ÇãÂßøÂã¢ÁîüÊàê
            up = [0, 1, 0]  # ‰ªÆ„ÅÆyËª∏
            x_axis = [
                up[1]*dir_z - up[2]*dir_y,
                up[2]*dir_x - up[0]*dir_z,
                up[0]*dir_y - up[1]*dir_x,
            ]
            x_norm = math.sqrt(sum(v**2 for v in x_axis))
            x_axis = [v / x_norm for v in x_axis]

            y_axis = [
                dir_y * x_axis[2] - dir_z * x_axis[1],
                dir_z * x_axis[0] - dir_x * x_axis[2],
                dir_x * x_axis[1] - dir_y * x_axis[0],
            ]

            rot_matrix = [
                [x_axis[0], y_axis[0], dir_x],
                [x_axis[1], y_axis[1], dir_y],
                [x_axis[2], y_axis[2], dir_z],
            ]
            quat = tf_transformations.quaternion_from_matrix([
                [rot_matrix[0][0], rot_matrix[0][1], rot_matrix[0][2], 0],
                [rot_matrix[1][0], rot_matrix[1][1], rot_matrix[1][2], 0],
                [rot_matrix[2][0], rot_matrix[2][1], rot_matrix[2][2], 0],
                [0, 0, 0, 1]
            ])

            pose = PoseStamped()
            pose.header.frame_id = 'base_link'
            pose.pose.position.x = x
            pose.pose.position.y = y
            pose.pose.position.z = z
            pose.pose.orientation.x = quat[0]
            pose.pose.orientation.y = quat[1]
            pose.pose.orientation.z = quat[2]
            pose.pose.orientation.w = quat[3]

            points.append(pose)
        return points

    def send_next_goal(self):
        if self.current_index >= len(self.trajectory_points):
            self.get_logger().info('‚úÖ All hemisphere points executed!')
            rclpy.shutdown()
            return

        pose = self.trajectory_points[self.current_index]
        self.get_logger().info(f'‚ñ∂Ô∏è Sending point {self.current_index + 1}/{len(self.trajectory_points)}')

        self.publish_ee_z_axis(pose, self.current_index)

        goal_msg = MoveGroup.Goal()
        req = MotionPlanRequest()
        req.group_name = 'ar_manipulator'
        req.max_velocity_scaling_factor = 0.2
        req.max_acceleration_scaling_factor = 0.2

        position_constraint = PositionConstraint()
        position_constraint.header.frame_id = pose.header.frame_id
        position_constraint.link_name = 'ee_link'
        position_constraint.target_point_offset.x = 0.0
        position_constraint.target_point_offset.y = 0.0
        position_constraint.target_point_offset.z = 0.0

        box = SolidPrimitive()
        box.type = SolidPrimitive.BOX
        box.dimensions = [0.01, 0.01, 0.01]
        position_constraint.constraint_region.primitives.append(box)
        position_constraint.constraint_region.primitive_poses.append(pose.pose)

        orientation_constraint = OrientationConstraint()
        orientation_constraint.header.frame_id = pose.header.frame_id
        orientation_constraint.link_name = 'ee_link'
        orientation_constraint.orientation = pose.pose.orientation
        orientation_constraint.absolute_x_axis_tolerance = 0.1
        orientation_constraint.absolute_y_axis_tolerance = 0.1
        orientation_constraint.absolute_z_axis_tolerance = 0.1
        orientation_constraint.weight = 1.0

        goal_constraints = Constraints()
        goal_constraints.position_constraints.append(position_constraint)
        goal_constraints.orientation_constraints.append(orientation_constraint)

        req.goal_constraints.append(goal_constraints)
        goal_msg.request = req

        self._send_goal_future = self._action_client.send_goal_async(goal_msg)
        self._send_goal_future.add_done_callback(self.goal_response_callback)

    def goal_response_callback(self, future):
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().error('‚ùå Goal rejected')
            rclpy.shutdown()
            return
        self.get_logger().info('‚úÖ Goal accepted')
        self._get_result_future = goal_handle.get_result_async()
        self._get_result_future.add_done_callback(self.get_result_callback)

    def get_result_callback(self, future):
        result = future.result().result
        self.get_logger().info(f'üéØ Result received: {result.error_code}')
        self.current_index += 1
        self.send_next_goal()

    def publish_ee_z_axis(self, pose, id_num):
        marker = Marker()
        marker.header.frame_id = 'base_link'
        marker.header.stamp = self.get_clock().now().to_msg()
        marker.ns = 'ee_z_axis'
        marker.id = id_num
        marker.type = Marker.ARROW
        marker.action = Marker.ADD
        marker.scale.x = 0.01
        marker.scale.y = 0.015
        marker.scale.z = 0.1
        marker.color.b = 1.0
        marker.color.a = 1.0

        start = Point()
        start.x = pose.pose.position.x
        start.y = pose.pose.position.y
        start.z = pose.pose.position.z

        quat = (
            pose.pose.orientation.x,
            pose.pose.orientation.y,
            pose.pose.orientation.z,
            pose.pose.orientation.w,
        )
        rot_matrix = tf_transformations.quaternion_matrix(quat)

        z_axis = [rot_matrix[0][2], rot_matrix[1][2], rot_matrix[2][2]]
        end = Point()
        end.x = start.x + 0.05 * z_axis[0]
        end.y = start.y + 0.05 * z_axis[1]
        end.z = start.z + 0.05 * z_axis[2]

        marker.points = [start, end]
        self.marker_pub.publish(marker)

    def publish_center_marker(self):
        marker = Marker()
        marker.header.frame_id = 'base_link'
        marker.header.stamp = self.get_clock().now().to_msg()
        marker.ns = 'center_marker'
        marker.id = 999
        marker.type = Marker.SPHERE
        marker.action = Marker.ADD
        marker.pose.position.x = 0.0
        marker.pose.position.y = -0.30
        marker.pose.position.z = 0.05
        marker.scale.x = 0.02
        marker.scale.y = 0.02
        marker.scale.z = 0.02
        marker.color.r = 1.0
        marker.color.a = 1.0
        self.marker_pub.publish(marker)

    def publish_arc_line_marker(self):
        marker = Marker()
        marker.header.frame_id = 'base_link'
        marker.header.stamp = self.get_clock().now().to_msg()
        marker.ns = 'hemisphere_path'
        marker.id = 888
        marker.type = Marker.LINE_STRIP
        marker.action = Marker.ADD
        marker.scale.x = 0.005
        marker.color.g = 1.0
        marker.color.a = 1.0
        for pose in self.trajectory_points:
            point = Point()
            point.x = pose.pose.position.x
            point.y = pose.pose.position.y
            point.z = pose.pose.position.z
            marker.points.append(point)
        self.marker_pub.publish(marker)

def main(args=None):
    rclpy.init(args=args)
    node = MoveAlongHemisphere()
    rclpy.spin(node)

if __name__ == '__main__':
    main()
